<?php
class Route {
    static function init() {
        // Названия контроллера по умолчанию —
        // контроллера главной страницы (Home).
        $controller_name = "Home";
        // Выбор действия по умолчанию при отсутствии
        // указанного пути — по умолчанию это index
        // (как в папках, где располагается index.html).
        $action_name = "index";
        // Использование параметров для уточнения данных
        // в адресной строке. По умолчанию отсутствуют.
        $argument = null;

        // Определение строки, которая должна быть вырезана
        // для построения маршрутизации сайта. Обратите внимание,
        // здесь должно находиться всё содержимое после localhost 
        // и до public_html со слешом *включительно*.
        // ВАЖНО: вам понадобится ОБЯЗАТЕЛЬНО вписать адрес в эту строчку
        // «под себя» при использовании кода из раздаточного материала!
        $cut = "/hws/my_prj/public_html/";
        // Вырезание из полного пути после localhost лишнюю строчку
        // и её запись в переменную $uri.
        $uri = str_replace($cut, "", $_SERVER["REQUEST_URI"]);
        // Также важно вырезать все GET-запросы из адресной
        // строки, чтобы избежать ошибок маршрутизации.
        $uri = strtok($uri, "?");
        // Построение маргрутизации будущего сайта с помощью
        // преобразования адреса в массив благодаря разделению
        // всех элементов с помощью слеша.
        $routes = explode("/", $uri);
        // Благодаря этим действиям, все маршруты будут
        // представлять массив, по которому понадобиться ориентироваться:
        // $routes = [
        //     [0] => "home"  // Выбран контроллер главной страницы
        //     [1] => "index" // Открывается содержание самой страницы
        // ];

        // Если в адрес передан контроллер [public_html/<контроллер>/],
        // то он будет переопределён, иначе останется Home.
        if (!empty($routes[0])) {
            $controller_name = $routes[0];
        }

        // Если в адрес передано действие [public_html/<контроллер>/<действие>],
        // то назначется действие на основе переданного текста. Иначе — index.
        if (!empty($routes[1])) {
            $action_name = $routes[1];
        }

        // Если в адресе передан уточняющий параметр после действия
        // [public_html/<контроллер>/<действие>/<параметр>], то он будет
        // передан в отдельную переменную — $argument.
        if (!empty($routes[2])) {
            $argument = $routes[2];
        }

        // Далее на основе названия контроллера определяются в отдельные
        // переменные модель, контроллер и действие. Важно, чтобы названия
        // были идентичны названиям класса внутри каждого файла.
        $model_name = "Model_" . $controller_name;
        $controller_name = "Controller_" . $controller_name;
        $action_name = "action_" . $action_name;

        // После происходит выбор файла модели. Для выбора файла
        // понадобится преобразовать полное название модели из переменной
        // $model_name в нижний регистр и добавить расширение .php
        $model_file = strtolower($model_name) . ".php";
        // После относительно public_html происходит указание
        // пути, где будет находиться файл модели.
        $model_path = "../app/models/$model_file";
        // Если файл существует, то он подключается.
        if(file_exists($model_path)) {
            include $model_path;
        }

        // Аналогично происходит выбор файла и подключение
        // файла контроллера.
        $controller_file = strtolower($controller_name) . ".php";
        $controller_path = "../app/controllers/$controller_file";
        if(file_exists($controller_path)) {
            include $controller_path;
        }
        // Если контроллер не найден, то потребуется вернуть ошибку
        else {
            echo "404";
            // По возвращению ошибка важно завершить выполнению любых
            // сценариев PHP, иначе будет возвращена фатальная ошибка.
            exit;
        }

        // Далее проиходит создание экземпляра класса выбранного
        // контроллера. Если на предыдущем участке отсутствует
        // команда exit, то при передаче несуществующих параметров
        // будет возвращена фатальная ошибка сценария.
        $controller = new $controller_name;
        // Далее название действия из $action_index записывается
        // в переменную $action для более удобного использования.
        $action = $action_name;

        // Если метод (функция) $action существует в классе
        // контроллера $controller, то он будет выполнен.
        if(method_exists($controller, $action)) {
            // Если параметр отсутствует, то он не передаётся.
            // Если в методе модели не предусмотрена передача
            // параметра, то ошибки не будет.
            ($argument != null) ? $controller->$action($argument) : $controller->$action();
        }
        // В ином случае будет возвращена ошибка 404, аналогично
        // отсутствию контроллера, но уже без прерывания скрипта,
        // так как это конец файла.
        else {
            echo "404";
        }
    }
}